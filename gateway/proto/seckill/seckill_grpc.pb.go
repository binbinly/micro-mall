//*
// 秒杀服务

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: seckill/seckill.proto

package gateway

import (
	context "context"
	common "gateway/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Seckill_Kill_FullMethodName          = "/seckill.Seckill/Kill"
	Seckill_GetSessionAll_FullMethodName = "/seckill.Seckill/GetSessionAll"
	Seckill_GetSkusList_FullMethodName   = "/seckill.Seckill/GetSkusList"
	Seckill_GetSkuByID_FullMethodName    = "/seckill.Seckill/GetSkuByID"
)

// SeckillClient is the client API for Seckill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeckillClient interface {
	// 秒杀
	Kill(ctx context.Context, in *KillReq, opts ...grpc.CallOption) (*KillReply, error)
	// 获取所有秒杀场次
	GetSessionAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SessionsReply, error)
	// 获取场次下所有秒杀商品
	GetSkusList(ctx context.Context, in *SessionIdReq, opts ...grpc.CallOption) (*SkusReply, error)
	// 获取商品秒杀详情
	GetSkuByID(ctx context.Context, in *common.SkuIDReq, opts ...grpc.CallOption) (*SkuReply, error)
}

type seckillClient struct {
	cc grpc.ClientConnInterface
}

func NewSeckillClient(cc grpc.ClientConnInterface) SeckillClient {
	return &seckillClient{cc}
}

func (c *seckillClient) Kill(ctx context.Context, in *KillReq, opts ...grpc.CallOption) (*KillReply, error) {
	out := new(KillReply)
	err := c.cc.Invoke(ctx, Seckill_Kill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillClient) GetSessionAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SessionsReply, error) {
	out := new(SessionsReply)
	err := c.cc.Invoke(ctx, Seckill_GetSessionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillClient) GetSkusList(ctx context.Context, in *SessionIdReq, opts ...grpc.CallOption) (*SkusReply, error) {
	out := new(SkusReply)
	err := c.cc.Invoke(ctx, Seckill_GetSkusList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillClient) GetSkuByID(ctx context.Context, in *common.SkuIDReq, opts ...grpc.CallOption) (*SkuReply, error) {
	out := new(SkuReply)
	err := c.cc.Invoke(ctx, Seckill_GetSkuByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeckillServer is the server API for Seckill service.
// All implementations must embed UnimplementedSeckillServer
// for forward compatibility
type SeckillServer interface {
	// 秒杀
	Kill(context.Context, *KillReq) (*KillReply, error)
	// 获取所有秒杀场次
	GetSessionAll(context.Context, *emptypb.Empty) (*SessionsReply, error)
	// 获取场次下所有秒杀商品
	GetSkusList(context.Context, *SessionIdReq) (*SkusReply, error)
	// 获取商品秒杀详情
	GetSkuByID(context.Context, *common.SkuIDReq) (*SkuReply, error)
	mustEmbedUnimplementedSeckillServer()
}

// UnimplementedSeckillServer must be embedded to have forward compatible implementations.
type UnimplementedSeckillServer struct {
}

func (UnimplementedSeckillServer) Kill(context.Context, *KillReq) (*KillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedSeckillServer) GetSessionAll(context.Context, *emptypb.Empty) (*SessionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionAll not implemented")
}
func (UnimplementedSeckillServer) GetSkusList(context.Context, *SessionIdReq) (*SkusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkusList not implemented")
}
func (UnimplementedSeckillServer) GetSkuByID(context.Context, *common.SkuIDReq) (*SkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuByID not implemented")
}
func (UnimplementedSeckillServer) mustEmbedUnimplementedSeckillServer() {}

// UnsafeSeckillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeckillServer will
// result in compilation errors.
type UnsafeSeckillServer interface {
	mustEmbedUnimplementedSeckillServer()
}

func RegisterSeckillServer(s grpc.ServiceRegistrar, srv SeckillServer) {
	s.RegisterService(&Seckill_ServiceDesc, srv)
}

func _Seckill_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seckill_Kill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServer).Kill(ctx, req.(*KillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seckill_GetSessionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServer).GetSessionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seckill_GetSessionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServer).GetSessionAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seckill_GetSkusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServer).GetSkusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seckill_GetSkusList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServer).GetSkusList(ctx, req.(*SessionIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seckill_GetSkuByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SkuIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServer).GetSkuByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seckill_GetSkuByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServer).GetSkuByID(ctx, req.(*common.SkuIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Seckill_ServiceDesc is the grpc.ServiceDesc for Seckill service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Seckill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seckill.Seckill",
	HandlerType: (*SeckillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kill",
			Handler:    _Seckill_Kill_Handler,
		},
		{
			MethodName: "GetSessionAll",
			Handler:    _Seckill_GetSessionAll_Handler,
		},
		{
			MethodName: "GetSkusList",
			Handler:    _Seckill_GetSkusList_Handler,
		},
		{
			MethodName: "GetSkuByID",
			Handler:    _Seckill_GetSkuByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seckill/seckill.proto",
}
