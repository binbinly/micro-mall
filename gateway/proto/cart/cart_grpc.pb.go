//*
// 购物车服务

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: cart/cart.proto

package cart

import (
	context "context"
	common "gateway/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cart_AddCart_FullMethodName     = "/cart.Cart/AddCart"
	Cart_EditCart_FullMethodName    = "/cart.Cart/EditCart"
	Cart_EditCartNum_FullMethodName = "/cart.Cart/EditCartNum"
	Cart_DelCart_FullMethodName     = "/cart.Cart/DelCart"
	Cart_ClearCart_FullMethodName   = "/cart.Cart/ClearCart"
	Cart_MyCart_FullMethodName      = "/cart.Cart/MyCart"
)

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	// / 添加购物车
	AddCart(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// / 更新购物车
	EditCart(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// / 更新购物车数量
	EditCartNum(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// / 批量删除购物车
	DelCart(ctx context.Context, in *common.SkuIDReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// / 清空购物车
	ClearCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// / 我的购物车
	MyCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CartsReply, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) AddCart(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cart_AddCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) EditCart(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cart_EditCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) EditCartNum(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cart_EditCartNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) DelCart(ctx context.Context, in *common.SkuIDReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cart_DelCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) ClearCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cart_ClearCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) MyCart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CartsReply, error) {
	out := new(CartsReply)
	err := c.cc.Invoke(ctx, Cart_MyCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	// / 添加购物车
	AddCart(context.Context, *AddReq) (*emptypb.Empty, error)
	// / 更新购物车
	EditCart(context.Context, *EditReq) (*emptypb.Empty, error)
	// / 更新购物车数量
	EditCartNum(context.Context, *AddReq) (*emptypb.Empty, error)
	// / 批量删除购物车
	DelCart(context.Context, *common.SkuIDReq) (*emptypb.Empty, error)
	// / 清空购物车
	ClearCart(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// / 我的购物车
	MyCart(context.Context, *emptypb.Empty) (*CartsReply, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) AddCart(context.Context, *AddReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCart not implemented")
}
func (UnimplementedCartServer) EditCart(context.Context, *EditReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCart not implemented")
}
func (UnimplementedCartServer) EditCartNum(context.Context, *AddReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCartNum not implemented")
}
func (UnimplementedCartServer) DelCart(context.Context, *common.SkuIDReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCart not implemented")
}
func (UnimplementedCartServer) ClearCart(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCart not implemented")
}
func (UnimplementedCartServer) MyCart(context.Context, *emptypb.Empty) (*CartsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyCart not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_AddCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).AddCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_AddCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).AddCart(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_EditCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).EditCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_EditCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).EditCart(ctx, req.(*EditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_EditCartNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).EditCartNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_EditCartNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).EditCartNum(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_DelCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SkuIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).DelCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_DelCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).DelCart(ctx, req.(*common.SkuIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_ClearCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).ClearCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_ClearCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).ClearCart(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_MyCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).MyCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_MyCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).MyCart(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.Cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCart",
			Handler:    _Cart_AddCart_Handler,
		},
		{
			MethodName: "EditCart",
			Handler:    _Cart_EditCart_Handler,
		},
		{
			MethodName: "EditCartNum",
			Handler:    _Cart_EditCartNum_Handler,
		},
		{
			MethodName: "DelCart",
			Handler:    _Cart_DelCart_Handler,
		},
		{
			MethodName: "ClearCart",
			Handler:    _Cart_ClearCart_Handler,
		},
		{
			MethodName: "MyCart",
			Handler:    _Cart_MyCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart/cart.proto",
}
