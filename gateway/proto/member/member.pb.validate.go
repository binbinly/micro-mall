// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: member/member.proto

package member

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReqMultiError, or
// nil if none found.
func (m *RegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 4 || l > 20 {
		err := RegisterReqValidationError{
			field:  "Username",
			reason: "value length must be between 4 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := RegisterReqValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetCode()) != 6 {
		err := RegisterReqValidationError{
			field:  "Code",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 20 {
		err := RegisterReqValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetConfirmPassword()); l < 6 || l > 20 {
		err := RegisterReqValidationError{
			field:  "ConfirmPassword",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterReqMultiError(errors)
	}

	return nil
}

// RegisterReqMultiError is an error wrapping multiple validation errors
// returned by RegisterReq.ValidateAll() if the designated constraints aren't met.
type RegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReqMultiError) AllErrors() []error { return m }

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 4 || l > 20 {
		err := LoginReqValidationError{
			field:  "Username",
			reason: "value length must be between 4 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 20 {
		err := LoginReqValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on PhoneLoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PhoneLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhoneLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PhoneLoginReqMultiError, or
// nil if none found.
func (m *PhoneLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PhoneLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := PhoneLoginReqValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetCode()) != 6 {
		err := PhoneLoginReqValidationError{
			field:  "Code",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return PhoneLoginReqMultiError(errors)
	}

	return nil
}

// PhoneLoginReqMultiError is an error wrapping multiple validation errors
// returned by PhoneLoginReq.ValidateAll() if the designated constraints
// aren't met.
type PhoneLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneLoginReqMultiError) AllErrors() []error { return m }

// PhoneLoginReqValidationError is the validation error returned by
// PhoneLoginReq.Validate if the designated constraints aren't met.
type PhoneLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneLoginReqValidationError) ErrorName() string { return "PhoneLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e PhoneLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneLoginReqValidationError{}

// Validate checks the field values on EditReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EditReqMultiError, or nil if none found.
func (m *EditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Avatar

	// no validation rules for Nickname

	// no validation rules for Sign

	if len(errors) > 0 {
		return EditReqMultiError(errors)
	}

	return nil
}

// EditReqMultiError is an error wrapping multiple validation errors returned
// by EditReq.ValidateAll() if the designated constraints aren't met.
type EditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditReqMultiError) AllErrors() []error { return m }

// EditReqValidationError is the validation error returned by EditReq.Validate
// if the designated constraints aren't met.
type EditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditReqValidationError) ErrorName() string { return "EditReqValidationError" }

// Error satisfies the builtin error interface
func (e EditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditReqValidationError{}

// Validate checks the field values on PwdEditReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PwdEditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PwdEditReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PwdEditReqMultiError, or
// nil if none found.
func (m *PwdEditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PwdEditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOldPassword()); l < 6 || l > 20 {
		err := PwdEditReqValidationError{
			field:  "OldPassword",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 20 {
		err := PwdEditReqValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetConfirmPassword()); l < 6 || l > 20 {
		err := PwdEditReqValidationError{
			field:  "ConfirmPassword",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PwdEditReqMultiError(errors)
	}

	return nil
}

// PwdEditReqMultiError is an error wrapping multiple validation errors
// returned by PwdEditReq.ValidateAll() if the designated constraints aren't met.
type PwdEditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PwdEditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PwdEditReqMultiError) AllErrors() []error { return m }

// PwdEditReqValidationError is the validation error returned by
// PwdEditReq.Validate if the designated constraints aren't met.
type PwdEditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PwdEditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PwdEditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PwdEditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PwdEditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PwdEditReqValidationError) ErrorName() string { return "PwdEditReqValidationError" }

// Error satisfies the builtin error interface
func (e PwdEditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPwdEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PwdEditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PwdEditReqValidationError{}

// Validate checks the field values on AddressAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressAddReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddressAddReqMultiError, or
// nil if none found.
func (m *AddressAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := AddressAddReqValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := AddressAddReqValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetProvince()) < 2 {
		err := AddressAddReqValidationError{
			field:  "Province",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCity()) < 2 {
		err := AddressAddReqValidationError{
			field:  "City",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCounty()) < 2 {
		err := AddressAddReqValidationError{
			field:  "County",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDetail()) < 3 {
		err := AddressAddReqValidationError{
			field:  "Detail",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AreaCode

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return AddressAddReqMultiError(errors)
	}

	return nil
}

// AddressAddReqMultiError is an error wrapping multiple validation errors
// returned by AddressAddReq.ValidateAll() if the designated constraints
// aren't met.
type AddressAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressAddReqMultiError) AllErrors() []error { return m }

// AddressAddReqValidationError is the validation error returned by
// AddressAddReq.Validate if the designated constraints aren't met.
type AddressAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressAddReqValidationError) ErrorName() string { return "AddressAddReqValidationError" }

// Error satisfies the builtin error interface
func (e AddressAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressAddReqValidationError{}

// Validate checks the field values on AddressIDReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressIDReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddressIDReqMultiError, or
// nil if none found.
func (m *AddressIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AddressIDReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddressIDReqMultiError(errors)
	}

	return nil
}

// AddressIDReqMultiError is an error wrapping multiple validation errors
// returned by AddressIDReq.ValidateAll() if the designated constraints aren't met.
type AddressIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressIDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressIDReqMultiError) AllErrors() []error { return m }

// AddressIDReqValidationError is the validation error returned by
// AddressIDReq.Validate if the designated constraints aren't met.
type AddressIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressIDReqValidationError) ErrorName() string { return "AddressIDReqValidationError" }

// Error satisfies the builtin error interface
func (e AddressIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressIDReqValidationError{}

// Validate checks the field values on PhoneReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhoneReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PhoneReqMultiError, or nil
// if none found.
func (m *PhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := PhoneReqValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return PhoneReqMultiError(errors)
	}

	return nil
}

// PhoneReqMultiError is an error wrapping multiple validation errors returned
// by PhoneReq.ValidateAll() if the designated constraints aren't met.
type PhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneReqMultiError) AllErrors() []error { return m }

// PhoneReqValidationError is the validation error returned by
// PhoneReq.Validate if the designated constraints aren't met.
type PhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneReqValidationError) ErrorName() string { return "PhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e PhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneReqValidationError{}

// Validate checks the field values on MemberTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberTokenReplyMultiError, or nil if none found.
func (m *MemberTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberTokenReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberTokenReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberTokenReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberTokenReplyMultiError(errors)
	}

	return nil
}

// MemberTokenReplyMultiError is an error wrapping multiple validation errors
// returned by MemberTokenReply.ValidateAll() if the designated constraints
// aren't met.
type MemberTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberTokenReplyMultiError) AllErrors() []error { return m }

// MemberTokenReplyValidationError is the validation error returned by
// MemberTokenReply.Validate if the designated constraints aren't met.
type MemberTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberTokenReplyValidationError) ErrorName() string { return "MemberTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e MemberTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberTokenReplyValidationError{}

// Validate checks the field values on AddressReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddressReplyMultiError, or
// nil if none found.
func (m *AddressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddressReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddressReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddressReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddressReplyMultiError(errors)
	}

	return nil
}

// AddressReplyMultiError is an error wrapping multiple validation errors
// returned by AddressReply.ValidateAll() if the designated constraints aren't met.
type AddressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressReplyMultiError) AllErrors() []error { return m }

// AddressReplyValidationError is the validation error returned by
// AddressReply.Validate if the designated constraints aren't met.
type AddressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressReplyValidationError) ErrorName() string { return "AddressReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressReplyValidationError{}

// Validate checks the field values on MemberReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberReplyMultiError, or
// nil if none found.
func (m *MemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberReplyMultiError(errors)
	}

	return nil
}

// MemberReplyMultiError is an error wrapping multiple validation errors
// returned by MemberReply.ValidateAll() if the designated constraints aren't met.
type MemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberReplyMultiError) AllErrors() []error { return m }

// MemberReplyValidationError is the validation error returned by
// MemberReply.Validate if the designated constraints aren't met.
type MemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberReplyValidationError) ErrorName() string { return "MemberReplyValidationError" }

// Error satisfies the builtin error interface
func (e MemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberReplyValidationError{}

// Validate checks the field values on AddressIDReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddressIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddressIDReplyMultiError,
// or nil if none found.
func (m *AddressIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Data

	if len(errors) > 0 {
		return AddressIDReplyMultiError(errors)
	}

	return nil
}

// AddressIDReplyMultiError is an error wrapping multiple validation errors
// returned by AddressIDReply.ValidateAll() if the designated constraints
// aren't met.
type AddressIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressIDReplyMultiError) AllErrors() []error { return m }

// AddressIDReplyValidationError is the validation error returned by
// AddressIDReply.Validate if the designated constraints aren't met.
type AddressIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressIDReplyValidationError) ErrorName() string { return "AddressIDReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddressIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressIDReplyValidationError{}

// Validate checks the field values on CodeReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CodeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CodeReplyMultiError, or nil
// if none found.
func (m *CodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Data

	if len(errors) > 0 {
		return CodeReplyMultiError(errors)
	}

	return nil
}

// CodeReplyMultiError is an error wrapping multiple validation errors returned
// by CodeReply.ValidateAll() if the designated constraints aren't met.
type CodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CodeReplyMultiError) AllErrors() []error { return m }

// CodeReplyValidationError is the validation error returned by
// CodeReply.Validate if the designated constraints aren't met.
type CodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodeReplyValidationError) ErrorName() string { return "CodeReplyValidationError" }

// Error satisfies the builtin error interface
func (e CodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodeReplyValidationError{}
