//*
// 产品服务

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: product/product.proto

package gateway

import (
	context "context"
	common "gateway/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Product_CategoryTree_FullMethodName    = "/product.Product/CategoryTree"
	Product_SkuSearch_FullMethodName       = "/product.Product/SkuSearch"
	Product_SkuList_FullMethodName         = "/product.Product/SkuList"
	Product_SkuDetail_FullMethodName       = "/product.Product/SkuDetail"
	Product_GetSkuSaleAttrs_FullMethodName = "/product.Product/GetSkuSaleAttrs"
)

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	// / 获取产品三级分类树
	CategoryTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoryReply, error)
	// / sku商品搜索
	SkuSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchReply, error)
	// / sku商品列表
	SkuList(ctx context.Context, in *SkuListReq, opts ...grpc.CallOption) (*SkuListReply, error)
	// / sku商品详情
	SkuDetail(ctx context.Context, in *common.SkuIDReq, opts ...grpc.CallOption) (*SkuReply, error)
	// / sku销售属性
	GetSkuSaleAttrs(ctx context.Context, in *common.SkuIDReq, opts ...grpc.CallOption) (*SkuSaleAttrReply, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) CategoryTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoryReply, error) {
	out := new(CategoryReply)
	err := c.cc.Invoke(ctx, Product_CategoryTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) SkuSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, Product_SkuSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) SkuList(ctx context.Context, in *SkuListReq, opts ...grpc.CallOption) (*SkuListReply, error) {
	out := new(SkuListReply)
	err := c.cc.Invoke(ctx, Product_SkuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) SkuDetail(ctx context.Context, in *common.SkuIDReq, opts ...grpc.CallOption) (*SkuReply, error) {
	out := new(SkuReply)
	err := c.cc.Invoke(ctx, Product_SkuDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSkuSaleAttrs(ctx context.Context, in *common.SkuIDReq, opts ...grpc.CallOption) (*SkuSaleAttrReply, error) {
	out := new(SkuSaleAttrReply)
	err := c.cc.Invoke(ctx, Product_GetSkuSaleAttrs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	// / 获取产品三级分类树
	CategoryTree(context.Context, *emptypb.Empty) (*CategoryReply, error)
	// / sku商品搜索
	SkuSearch(context.Context, *SearchReq) (*SearchReply, error)
	// / sku商品列表
	SkuList(context.Context, *SkuListReq) (*SkuListReply, error)
	// / sku商品详情
	SkuDetail(context.Context, *common.SkuIDReq) (*SkuReply, error)
	// / sku销售属性
	GetSkuSaleAttrs(context.Context, *common.SkuIDReq) (*SkuSaleAttrReply, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) CategoryTree(context.Context, *emptypb.Empty) (*CategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryTree not implemented")
}
func (UnimplementedProductServer) SkuSearch(context.Context, *SearchReq) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuSearch not implemented")
}
func (UnimplementedProductServer) SkuList(context.Context, *SkuListReq) (*SkuListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuList not implemented")
}
func (UnimplementedProductServer) SkuDetail(context.Context, *common.SkuIDReq) (*SkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuDetail not implemented")
}
func (UnimplementedProductServer) GetSkuSaleAttrs(context.Context, *common.SkuIDReq) (*SkuSaleAttrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuSaleAttrs not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_CategoryTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CategoryTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CategoryTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CategoryTree(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_SkuSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).SkuSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_SkuSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).SkuSearch(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_SkuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).SkuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_SkuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).SkuList(ctx, req.(*SkuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_SkuDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SkuIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).SkuDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_SkuDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).SkuDetail(ctx, req.(*common.SkuIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSkuSaleAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SkuIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSkuSaleAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSkuSaleAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSkuSaleAttrs(ctx, req.(*common.SkuIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CategoryTree",
			Handler:    _Product_CategoryTree_Handler,
		},
		{
			MethodName: "SkuSearch",
			Handler:    _Product_SkuSearch_Handler,
		},
		{
			MethodName: "SkuList",
			Handler:    _Product_SkuList_Handler,
		},
		{
			MethodName: "SkuDetail",
			Handler:    _Product_SkuDetail_Handler,
		},
		{
			MethodName: "GetSkuSaleAttrs",
			Handler:    _Product_GetSkuSaleAttrs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/product.proto",
}
