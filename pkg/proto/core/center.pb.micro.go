// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: core/center.proto

package core

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	empty "github.com/golang/protobuf/ptypes/empty"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for centerService service

func NewCenterEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for centerService service

type CenterService interface {
	// / 用户注册
	Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterReply, error)
	// / 用户名密码登录
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*UserReply, error)
	// / 手机号登录
	PhoneLogin(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*UserReply, error)
	// / 修改用户信息
	Edit(ctx context.Context, in *EditReq, opts ...client.CallOption) (*empty.Empty, error)
	// / 修改密码
	EditPwd(ctx context.Context, in *EditPwdReq, opts ...client.CallOption) (*empty.Empty, error)
	// / 获取用户信息
	Info(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*UserInfo, error)
	// / 用户登出
	Logout(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error)
}

type centerService struct {
	c    client.Client
	name string
}

func NewCenterService(name string, c client.Client) CenterService {
	return &centerService{
		c:    c,
		name: name,
	}
}

func (c *centerService) Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*RegisterReply, error) {
	req := c.c.NewRequest(c.name, "centerService.Register", in)
	out := new(RegisterReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*UserReply, error) {
	req := c.c.NewRequest(c.name, "centerService.Login", in)
	out := new(UserReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerService) PhoneLogin(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*UserReply, error) {
	req := c.c.NewRequest(c.name, "centerService.PhoneLogin", in)
	out := new(UserReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerService) Edit(ctx context.Context, in *EditReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "centerService.Edit", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerService) EditPwd(ctx context.Context, in *EditPwdReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "centerService.EditPwd", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerService) Info(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "centerService.Info", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerService) Logout(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "centerService.Logout", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for centerService service

type CenterHandler interface {
	// / 用户注册
	Register(context.Context, *RegisterReq, *RegisterReply) error
	// / 用户名密码登录
	Login(context.Context, *LoginReq, *UserReply) error
	// / 手机号登录
	PhoneLogin(context.Context, *PhoneReq, *UserReply) error
	// / 修改用户信息
	Edit(context.Context, *EditReq, *empty.Empty) error
	// / 修改密码
	EditPwd(context.Context, *EditPwdReq, *empty.Empty) error
	// / 获取用户信息
	Info(context.Context, *empty.Empty, *UserInfo) error
	// / 用户登出
	Logout(context.Context, *empty.Empty, *empty.Empty) error
}

func RegisterCenterHandler(s server.Server, hdlr CenterHandler, opts ...server.HandlerOption) error {
	type center interface {
		Register(ctx context.Context, in *RegisterReq, out *RegisterReply) error
		Login(ctx context.Context, in *LoginReq, out *UserReply) error
		PhoneLogin(ctx context.Context, in *PhoneReq, out *UserReply) error
		Edit(ctx context.Context, in *EditReq, out *empty.Empty) error
		EditPwd(ctx context.Context, in *EditPwdReq, out *empty.Empty) error
		Info(ctx context.Context, in *empty.Empty, out *UserInfo) error
		Logout(ctx context.Context, in *empty.Empty, out *empty.Empty) error
	}
	type Center struct {
		center
	}
	h := &centerHandler{hdlr}
	return s.Handle(s.NewHandler(&Center{h}, opts...))
}

type centerHandler struct {
	CenterHandler
}

func (h *centerHandler) Register(ctx context.Context, in *RegisterReq, out *RegisterReply) error {
	return h.CenterHandler.Register(ctx, in, out)
}

func (h *centerHandler) Login(ctx context.Context, in *LoginReq, out *UserReply) error {
	return h.CenterHandler.Login(ctx, in, out)
}

func (h *centerHandler) PhoneLogin(ctx context.Context, in *PhoneReq, out *UserReply) error {
	return h.CenterHandler.PhoneLogin(ctx, in, out)
}

func (h *centerHandler) Edit(ctx context.Context, in *EditReq, out *empty.Empty) error {
	return h.CenterHandler.Edit(ctx, in, out)
}

func (h *centerHandler) EditPwd(ctx context.Context, in *EditPwdReq, out *empty.Empty) error {
	return h.CenterHandler.EditPwd(ctx, in, out)
}

func (h *centerHandler) Info(ctx context.Context, in *empty.Empty, out *UserInfo) error {
	return h.CenterHandler.Info(ctx, in, out)
}

func (h *centerHandler) Logout(ctx context.Context, in *empty.Empty, out *empty.Empty) error {
	return h.CenterHandler.Logout(ctx, in, out)
}
