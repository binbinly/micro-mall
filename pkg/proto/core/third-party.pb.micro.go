// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: core/third-party.proto

package core

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	empty "github.com/golang/protobuf/ptypes/empty"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ThirdParty service

func NewThirdPartyEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ThirdParty service

type ThirdPartyService interface {
	// / 发送短信验证码
	SendSMS(ctx context.Context, in *SendSMSReq, opts ...client.CallOption) (*CodeReply, error)
	// / 短信验证码验证
	CheckVCode(ctx context.Context, in *VCodeReq, opts ...client.CallOption) (*empty.Empty, error)
	// / 以太币支付检测
	CheckETHPay(ctx context.Context, in *ETHPayReq, opts ...client.CallOption) (*empty.Empty, error)
}

type thirdPartyService struct {
	c    client.Client
	name string
}

func NewThirdPartyService(name string, c client.Client) ThirdPartyService {
	return &thirdPartyService{
		c:    c,
		name: name,
	}
}

func (c *thirdPartyService) SendSMS(ctx context.Context, in *SendSMSReq, opts ...client.CallOption) (*CodeReply, error) {
	req := c.c.NewRequest(c.name, "ThirdParty.SendSMS", in)
	out := new(CodeReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyService) CheckVCode(ctx context.Context, in *VCodeReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "ThirdParty.CheckVCode", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyService) CheckETHPay(ctx context.Context, in *ETHPayReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "ThirdParty.CheckETHPay", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ThirdParty service

type ThirdPartyHandler interface {
	// / 发送短信验证码
	SendSMS(context.Context, *SendSMSReq, *CodeReply) error
	// / 短信验证码验证
	CheckVCode(context.Context, *VCodeReq, *empty.Empty) error
	// / 以太币支付检测
	CheckETHPay(context.Context, *ETHPayReq, *empty.Empty) error
}

func RegisterThirdPartyHandler(s server.Server, hdlr ThirdPartyHandler, opts ...server.HandlerOption) error {
	type thirdParty interface {
		SendSMS(ctx context.Context, in *SendSMSReq, out *CodeReply) error
		CheckVCode(ctx context.Context, in *VCodeReq, out *empty.Empty) error
		CheckETHPay(ctx context.Context, in *ETHPayReq, out *empty.Empty) error
	}
	type ThirdParty struct {
		thirdParty
	}
	h := &thirdPartyHandler{hdlr}
	return s.Handle(s.NewHandler(&ThirdParty{h}, opts...))
}

type thirdPartyHandler struct {
	ThirdPartyHandler
}

func (h *thirdPartyHandler) SendSMS(ctx context.Context, in *SendSMSReq, out *CodeReply) error {
	return h.ThirdPartyHandler.SendSMS(ctx, in, out)
}

func (h *thirdPartyHandler) CheckVCode(ctx context.Context, in *VCodeReq, out *empty.Empty) error {
	return h.ThirdPartyHandler.CheckVCode(ctx, in, out)
}

func (h *thirdPartyHandler) CheckETHPay(ctx context.Context, in *ETHPayReq, out *empty.Empty) error {
	return h.ThirdPartyHandler.CheckETHPay(ctx, in, out)
}
