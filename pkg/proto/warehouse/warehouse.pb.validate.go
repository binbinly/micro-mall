// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: warehouse/warehouse.proto

package warehouse

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SkusReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkusReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkusReqMultiError, or nil if none found.
func (m *SkusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := SkusReqValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SkusReqMultiError(errors)
	}

	return nil
}

// SkusReqMultiError is an error wrapping multiple validation errors returned
// by SkusReq.ValidateAll() if the designated constraints aren't met.
type SkusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkusReqMultiError) AllErrors() []error { return m }

// SkusReqValidationError is the validation error returned by SkusReq.Validate
// if the designated constraints aren't met.
type SkusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkusReqValidationError) ErrorName() string { return "SkusReqValidationError" }

// Error satisfies the builtin error interface
func (e SkusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkusReqValidationError{}

// Validate checks the field values on SkuStockLockReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkuStockLockReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuStockLockReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkuStockLockReqMultiError, or nil if none found.
func (m *SkuStockLockReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuStockLockReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := SkuStockLockReqValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderNo()) < 3 {
		err := SkuStockLockReqValidationError{
			field:  "OrderNo",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetConsignee()) < 2 {
		err := SkuStockLockReqValidationError{
			field:  "Consignee",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) < 3 {
		err := SkuStockLockReqValidationError{
			field:  "Phone",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 3 {
		err := SkuStockLockReqValidationError{
			field:  "Address",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Note

	if len(m.GetSkuNums()) < 1 {
		err := SkuStockLockReqValidationError{
			field:  "SkuNums",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SkuStockLockReqMultiError(errors)
	}

	return nil
}

// SkuStockLockReqMultiError is an error wrapping multiple validation errors
// returned by SkuStockLockReq.ValidateAll() if the designated constraints
// aren't met.
type SkuStockLockReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuStockLockReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuStockLockReqMultiError) AllErrors() []error { return m }

// SkuStockLockReqValidationError is the validation error returned by
// SkuStockLockReq.Validate if the designated constraints aren't met.
type SkuStockLockReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuStockLockReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuStockLockReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuStockLockReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuStockLockReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuStockLockReqValidationError) ErrorName() string { return "SkuStockLockReqValidationError" }

// Error satisfies the builtin error interface
func (e SkuStockLockReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuStockLockReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuStockLockReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuStockLockReqValidationError{}

// Validate checks the field values on SkuStockUnlockReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkuStockUnlockReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuStockUnlockReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkuStockUnlockReqMultiError, or nil if none found.
func (m *SkuStockUnlockReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuStockUnlockReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := SkuStockUnlockReqValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Finish

	if len(errors) > 0 {
		return SkuStockUnlockReqMultiError(errors)
	}

	return nil
}

// SkuStockUnlockReqMultiError is an error wrapping multiple validation errors
// returned by SkuStockUnlockReq.ValidateAll() if the designated constraints
// aren't met.
type SkuStockUnlockReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuStockUnlockReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuStockUnlockReqMultiError) AllErrors() []error { return m }

// SkuStockUnlockReqValidationError is the validation error returned by
// SkuStockUnlockReq.Validate if the designated constraints aren't met.
type SkuStockUnlockReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuStockUnlockReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuStockUnlockReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuStockUnlockReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuStockUnlockReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuStockUnlockReqValidationError) ErrorName() string {
	return "SkuStockUnlockReqValidationError"
}

// Error satisfies the builtin error interface
func (e SkuStockUnlockReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuStockUnlockReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuStockUnlockReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuStockUnlockReqValidationError{}

// Validate checks the field values on SkuStockReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuStockReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuStockReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuStockReplyMultiError, or
// nil if none found.
func (m *SkuStockReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuStockReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Num

	if len(errors) > 0 {
		return SkuStockReplyMultiError(errors)
	}

	return nil
}

// SkuStockReplyMultiError is an error wrapping multiple validation errors
// returned by SkuStockReply.ValidateAll() if the designated constraints
// aren't met.
type SkuStockReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuStockReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuStockReplyMultiError) AllErrors() []error { return m }

// SkuStockReplyValidationError is the validation error returned by
// SkuStockReply.Validate if the designated constraints aren't met.
type SkuStockReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuStockReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuStockReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuStockReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuStockReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuStockReplyValidationError) ErrorName() string { return "SkuStockReplyValidationError" }

// Error satisfies the builtin error interface
func (e SkuStockReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuStockReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuStockReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuStockReplyValidationError{}

// Validate checks the field values on SkusStockReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkusStockReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkusStockReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkusStockReplyMultiError,
// or nil if none found.
func (m *SkusStockReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SkusStockReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuNums

	if len(errors) > 0 {
		return SkusStockReplyMultiError(errors)
	}

	return nil
}

// SkusStockReplyMultiError is an error wrapping multiple validation errors
// returned by SkusStockReply.ValidateAll() if the designated constraints
// aren't met.
type SkusStockReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkusStockReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkusStockReplyMultiError) AllErrors() []error { return m }

// SkusStockReplyValidationError is the validation error returned by
// SkusStockReply.Validate if the designated constraints aren't met.
type SkusStockReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkusStockReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkusStockReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkusStockReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkusStockReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkusStockReplyValidationError) ErrorName() string { return "SkusStockReplyValidationError" }

// Error satisfies the builtin error interface
func (e SkusStockReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkusStockReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkusStockReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkusStockReplyValidationError{}
