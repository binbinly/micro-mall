// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: warehouse/warehouse.proto

package warehouse

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	empty "github.com/golang/protobuf/ptypes/empty"
	proto "google.golang.org/protobuf/proto"
	math "math"
	common "pkg/proto/common"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Warehouse service

func NewWarehouseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Warehouse service

type WarehouseService interface {
	// / 获取sku的库存数量
	GetSkuStock(ctx context.Context, in *common.SkuIDReq, opts ...client.CallOption) (*SkuStockReply, error)
	// / 批量获取sku的库存数量
	BatchSkusStock(ctx context.Context, in *SkusReq, opts ...client.CallOption) (*SkusStockReply, error)
	// / 锁定sku库存
	SKuStockLock(ctx context.Context, in *SkuStockLockReq, opts ...client.CallOption) (*empty.Empty, error)
	// / 解锁sku库存
	SkuStockUnlock(ctx context.Context, in *SkuStockUnlockReq, opts ...client.CallOption) (*empty.Empty, error)
}

type warehouseService struct {
	c    client.Client
	name string
}

func NewWarehouseService(name string, c client.Client) WarehouseService {
	return &warehouseService{
		c:    c,
		name: name,
	}
}

func (c *warehouseService) GetSkuStock(ctx context.Context, in *common.SkuIDReq, opts ...client.CallOption) (*SkuStockReply, error) {
	req := c.c.NewRequest(c.name, "Warehouse.GetSkuStock", in)
	out := new(SkuStockReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) BatchSkusStock(ctx context.Context, in *SkusReq, opts ...client.CallOption) (*SkusStockReply, error) {
	req := c.c.NewRequest(c.name, "Warehouse.BatchSkusStock", in)
	out := new(SkusStockReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) SKuStockLock(ctx context.Context, in *SkuStockLockReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Warehouse.SKuStockLock", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseService) SkuStockUnlock(ctx context.Context, in *SkuStockUnlockReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Warehouse.SkuStockUnlock", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Warehouse service

type WarehouseHandler interface {
	// / 获取sku的库存数量
	GetSkuStock(context.Context, *common.SkuIDReq, *SkuStockReply) error
	// / 批量获取sku的库存数量
	BatchSkusStock(context.Context, *SkusReq, *SkusStockReply) error
	// / 锁定sku库存
	SKuStockLock(context.Context, *SkuStockLockReq, *empty.Empty) error
	// / 解锁sku库存
	SkuStockUnlock(context.Context, *SkuStockUnlockReq, *empty.Empty) error
}

func RegisterWarehouseHandler(s server.Server, hdlr WarehouseHandler, opts ...server.HandlerOption) error {
	type warehouse interface {
		GetSkuStock(ctx context.Context, in *common.SkuIDReq, out *SkuStockReply) error
		BatchSkusStock(ctx context.Context, in *SkusReq, out *SkusStockReply) error
		SKuStockLock(ctx context.Context, in *SkuStockLockReq, out *empty.Empty) error
		SkuStockUnlock(ctx context.Context, in *SkuStockUnlockReq, out *empty.Empty) error
	}
	type Warehouse struct {
		warehouse
	}
	h := &warehouseHandler{hdlr}
	return s.Handle(s.NewHandler(&Warehouse{h}, opts...))
}

type warehouseHandler struct {
	WarehouseHandler
}

func (h *warehouseHandler) GetSkuStock(ctx context.Context, in *common.SkuIDReq, out *SkuStockReply) error {
	return h.WarehouseHandler.GetSkuStock(ctx, in, out)
}

func (h *warehouseHandler) BatchSkusStock(ctx context.Context, in *SkusReq, out *SkusStockReply) error {
	return h.WarehouseHandler.BatchSkusStock(ctx, in, out)
}

func (h *warehouseHandler) SKuStockLock(ctx context.Context, in *SkuStockLockReq, out *empty.Empty) error {
	return h.WarehouseHandler.SKuStockLock(ctx, in, out)
}

func (h *warehouseHandler) SkuStockUnlock(ctx context.Context, in *SkuStockUnlockReq, out *empty.Empty) error {
	return h.WarehouseHandler.SkuStockUnlock(ctx, in, out)
}
