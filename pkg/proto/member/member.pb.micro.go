// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: member/member.proto

package member

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	empty "github.com/golang/protobuf/ptypes/empty"
	proto "google.golang.org/protobuf/proto"
	math "math"
	common "pkg/proto/common"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Member service

func NewMemberEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Member service

type MemberService interface {
	// / 注册
	Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*empty.Empty, error)
	// / 用户名密码登录
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*MemberTokenReply, error)
	// / 手机号登录
	PhoneLogin(ctx context.Context, in *PhoneLoginReq, opts ...client.CallOption) (*MemberTokenReply, error)
	// / 修改会员信息
	Edit(ctx context.Context, in *EditReq, opts ...client.CallOption) (*empty.Empty, error)
	// / 修改密码
	PwdEdit(ctx context.Context, in *PwdEditReq, opts ...client.CallOption) (*empty.Empty, error)
	// / 获取会员信息
	Profile(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*MemberReply, error)
	// / 登出
	Logout(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error)
	// / 添加收货地址
	AddressAdd(ctx context.Context, in *AddressAddReq, opts ...client.CallOption) (*AddressIDReply, error)
	// / 修改收货地址
	AddressEdit(ctx context.Context, in *common.Address, opts ...client.CallOption) (*empty.Empty, error)
	// / 收货地址列表
	GetAddressList(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*AddressReply, error)
	// / 删除收货地址
	AddressDel(ctx context.Context, in *AddressIDReq, opts ...client.CallOption) (*empty.Empty, error)
	// / 发送短信验证码
	SendCode(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*CodeReply, error)
	// / ---- 以下内部调用 ----
	// / 获取收货地址信息
	GetAddressInfo(ctx context.Context, in *AddressIDReq, opts ...client.CallOption) (*AddressInfoInternal, error)
}

type memberService struct {
	c    client.Client
	name string
}

func NewMemberService(name string, c client.Client) MemberService {
	return &memberService{
		c:    c,
		name: name,
	}
}

func (c *memberService) Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Member.Register", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*MemberTokenReply, error) {
	req := c.c.NewRequest(c.name, "Member.Login", in)
	out := new(MemberTokenReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) PhoneLogin(ctx context.Context, in *PhoneLoginReq, opts ...client.CallOption) (*MemberTokenReply, error) {
	req := c.c.NewRequest(c.name, "Member.PhoneLogin", in)
	out := new(MemberTokenReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Edit(ctx context.Context, in *EditReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Member.Edit", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) PwdEdit(ctx context.Context, in *PwdEditReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Member.PwdEdit", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Profile(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*MemberReply, error) {
	req := c.c.NewRequest(c.name, "Member.Profile", in)
	out := new(MemberReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Logout(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Member.Logout", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) AddressAdd(ctx context.Context, in *AddressAddReq, opts ...client.CallOption) (*AddressIDReply, error) {
	req := c.c.NewRequest(c.name, "Member.AddressAdd", in)
	out := new(AddressIDReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) AddressEdit(ctx context.Context, in *common.Address, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Member.AddressEdit", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) GetAddressList(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*AddressReply, error) {
	req := c.c.NewRequest(c.name, "Member.GetAddressList", in)
	out := new(AddressReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) AddressDel(ctx context.Context, in *AddressIDReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Member.AddressDel", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) SendCode(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*CodeReply, error) {
	req := c.c.NewRequest(c.name, "Member.SendCode", in)
	out := new(CodeReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) GetAddressInfo(ctx context.Context, in *AddressIDReq, opts ...client.CallOption) (*AddressInfoInternal, error) {
	req := c.c.NewRequest(c.name, "Member.GetAddressInfo", in)
	out := new(AddressInfoInternal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Member service

type MemberHandler interface {
	// / 注册
	Register(context.Context, *RegisterReq, *empty.Empty) error
	// / 用户名密码登录
	Login(context.Context, *LoginReq, *MemberTokenReply) error
	// / 手机号登录
	PhoneLogin(context.Context, *PhoneLoginReq, *MemberTokenReply) error
	// / 修改会员信息
	Edit(context.Context, *EditReq, *empty.Empty) error
	// / 修改密码
	PwdEdit(context.Context, *PwdEditReq, *empty.Empty) error
	// / 获取会员信息
	Profile(context.Context, *empty.Empty, *MemberReply) error
	// / 登出
	Logout(context.Context, *empty.Empty, *empty.Empty) error
	// / 添加收货地址
	AddressAdd(context.Context, *AddressAddReq, *AddressIDReply) error
	// / 修改收货地址
	AddressEdit(context.Context, *common.Address, *empty.Empty) error
	// / 收货地址列表
	GetAddressList(context.Context, *empty.Empty, *AddressReply) error
	// / 删除收货地址
	AddressDel(context.Context, *AddressIDReq, *empty.Empty) error
	// / 发送短信验证码
	SendCode(context.Context, *PhoneReq, *CodeReply) error
	// / ---- 以下内部调用 ----
	// / 获取收货地址信息
	GetAddressInfo(context.Context, *AddressIDReq, *AddressInfoInternal) error
}

func RegisterMemberHandler(s server.Server, hdlr MemberHandler, opts ...server.HandlerOption) error {
	type member interface {
		Register(ctx context.Context, in *RegisterReq, out *empty.Empty) error
		Login(ctx context.Context, in *LoginReq, out *MemberTokenReply) error
		PhoneLogin(ctx context.Context, in *PhoneLoginReq, out *MemberTokenReply) error
		Edit(ctx context.Context, in *EditReq, out *empty.Empty) error
		PwdEdit(ctx context.Context, in *PwdEditReq, out *empty.Empty) error
		Profile(ctx context.Context, in *empty.Empty, out *MemberReply) error
		Logout(ctx context.Context, in *empty.Empty, out *empty.Empty) error
		AddressAdd(ctx context.Context, in *AddressAddReq, out *AddressIDReply) error
		AddressEdit(ctx context.Context, in *common.Address, out *empty.Empty) error
		GetAddressList(ctx context.Context, in *empty.Empty, out *AddressReply) error
		AddressDel(ctx context.Context, in *AddressIDReq, out *empty.Empty) error
		SendCode(ctx context.Context, in *PhoneReq, out *CodeReply) error
		GetAddressInfo(ctx context.Context, in *AddressIDReq, out *AddressInfoInternal) error
	}
	type Member struct {
		member
	}
	h := &memberHandler{hdlr}
	return s.Handle(s.NewHandler(&Member{h}, opts...))
}

type memberHandler struct {
	MemberHandler
}

func (h *memberHandler) Register(ctx context.Context, in *RegisterReq, out *empty.Empty) error {
	return h.MemberHandler.Register(ctx, in, out)
}

func (h *memberHandler) Login(ctx context.Context, in *LoginReq, out *MemberTokenReply) error {
	return h.MemberHandler.Login(ctx, in, out)
}

func (h *memberHandler) PhoneLogin(ctx context.Context, in *PhoneLoginReq, out *MemberTokenReply) error {
	return h.MemberHandler.PhoneLogin(ctx, in, out)
}

func (h *memberHandler) Edit(ctx context.Context, in *EditReq, out *empty.Empty) error {
	return h.MemberHandler.Edit(ctx, in, out)
}

func (h *memberHandler) PwdEdit(ctx context.Context, in *PwdEditReq, out *empty.Empty) error {
	return h.MemberHandler.PwdEdit(ctx, in, out)
}

func (h *memberHandler) Profile(ctx context.Context, in *empty.Empty, out *MemberReply) error {
	return h.MemberHandler.Profile(ctx, in, out)
}

func (h *memberHandler) Logout(ctx context.Context, in *empty.Empty, out *empty.Empty) error {
	return h.MemberHandler.Logout(ctx, in, out)
}

func (h *memberHandler) AddressAdd(ctx context.Context, in *AddressAddReq, out *AddressIDReply) error {
	return h.MemberHandler.AddressAdd(ctx, in, out)
}

func (h *memberHandler) AddressEdit(ctx context.Context, in *common.Address, out *empty.Empty) error {
	return h.MemberHandler.AddressEdit(ctx, in, out)
}

func (h *memberHandler) GetAddressList(ctx context.Context, in *empty.Empty, out *AddressReply) error {
	return h.MemberHandler.GetAddressList(ctx, in, out)
}

func (h *memberHandler) AddressDel(ctx context.Context, in *AddressIDReq, out *empty.Empty) error {
	return h.MemberHandler.AddressDel(ctx, in, out)
}

func (h *memberHandler) SendCode(ctx context.Context, in *PhoneReq, out *CodeReply) error {
	return h.MemberHandler.SendCode(ctx, in, out)
}

func (h *memberHandler) GetAddressInfo(ctx context.Context, in *AddressIDReq, out *AddressInfoInternal) error {
	return h.MemberHandler.GetAddressInfo(ctx, in, out)
}
