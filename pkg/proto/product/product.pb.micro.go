// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product/product.proto

package product

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	empty "github.com/golang/protobuf/ptypes/empty"
	proto "google.golang.org/protobuf/proto"
	math "math"
	common "pkg/proto/common"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Product service

func NewProductEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Product service

type ProductService interface {
	// / 获取产品三级分类树
	CategoryTree(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*CategoryReply, error)
	// / sku商品搜索
	SkuSearch(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchReply, error)
	// / sku商品列表
	SkuList(ctx context.Context, in *SkuListReq, opts ...client.CallOption) (*SkuListReply, error)
	// / sku商品详情
	SkuDetail(ctx context.Context, in *common.SkuIDReq, opts ...client.CallOption) (*SkuReply, error)
	// / sku销售属性
	GetSkuSaleAttrs(ctx context.Context, in *common.SkuIDReq, opts ...client.CallOption) (*SkuSaleAttrReply, error)
	// / ---- 以下内部调用 ----
	// / sku信息
	GetSkuByID(ctx context.Context, in *common.SkuIDReq, opts ...client.CallOption) (*SkuInfoInternal, error)
	// / 商品评价
	SpuComment(ctx context.Context, in *CommentReq, opts ...client.CallOption) (*empty.Empty, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) CategoryTree(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*CategoryReply, error) {
	req := c.c.NewRequest(c.name, "Product.CategoryTree", in)
	out := new(CategoryReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) SkuSearch(ctx context.Context, in *SearchReq, opts ...client.CallOption) (*SearchReply, error) {
	req := c.c.NewRequest(c.name, "Product.SkuSearch", in)
	out := new(SearchReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) SkuList(ctx context.Context, in *SkuListReq, opts ...client.CallOption) (*SkuListReply, error) {
	req := c.c.NewRequest(c.name, "Product.SkuList", in)
	out := new(SkuListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) SkuDetail(ctx context.Context, in *common.SkuIDReq, opts ...client.CallOption) (*SkuReply, error) {
	req := c.c.NewRequest(c.name, "Product.SkuDetail", in)
	out := new(SkuReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetSkuSaleAttrs(ctx context.Context, in *common.SkuIDReq, opts ...client.CallOption) (*SkuSaleAttrReply, error) {
	req := c.c.NewRequest(c.name, "Product.GetSkuSaleAttrs", in)
	out := new(SkuSaleAttrReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetSkuByID(ctx context.Context, in *common.SkuIDReq, opts ...client.CallOption) (*SkuInfoInternal, error) {
	req := c.c.NewRequest(c.name, "Product.GetSkuByID", in)
	out := new(SkuInfoInternal)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) SpuComment(ctx context.Context, in *CommentReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Product.SpuComment", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Product service

type ProductHandler interface {
	// / 获取产品三级分类树
	CategoryTree(context.Context, *empty.Empty, *CategoryReply) error
	// / sku商品搜索
	SkuSearch(context.Context, *SearchReq, *SearchReply) error
	// / sku商品列表
	SkuList(context.Context, *SkuListReq, *SkuListReply) error
	// / sku商品详情
	SkuDetail(context.Context, *common.SkuIDReq, *SkuReply) error
	// / sku销售属性
	GetSkuSaleAttrs(context.Context, *common.SkuIDReq, *SkuSaleAttrReply) error
	// / ---- 以下内部调用 ----
	// / sku信息
	GetSkuByID(context.Context, *common.SkuIDReq, *SkuInfoInternal) error
	// / 商品评价
	SpuComment(context.Context, *CommentReq, *empty.Empty) error
}

func RegisterProductHandler(s server.Server, hdlr ProductHandler, opts ...server.HandlerOption) error {
	type product interface {
		CategoryTree(ctx context.Context, in *empty.Empty, out *CategoryReply) error
		SkuSearch(ctx context.Context, in *SearchReq, out *SearchReply) error
		SkuList(ctx context.Context, in *SkuListReq, out *SkuListReply) error
		SkuDetail(ctx context.Context, in *common.SkuIDReq, out *SkuReply) error
		GetSkuSaleAttrs(ctx context.Context, in *common.SkuIDReq, out *SkuSaleAttrReply) error
		GetSkuByID(ctx context.Context, in *common.SkuIDReq, out *SkuInfoInternal) error
		SpuComment(ctx context.Context, in *CommentReq, out *empty.Empty) error
	}
	type Product struct {
		product
	}
	h := &productHandler{hdlr}
	return s.Handle(s.NewHandler(&Product{h}, opts...))
}

type productHandler struct {
	ProductHandler
}

func (h *productHandler) CategoryTree(ctx context.Context, in *empty.Empty, out *CategoryReply) error {
	return h.ProductHandler.CategoryTree(ctx, in, out)
}

func (h *productHandler) SkuSearch(ctx context.Context, in *SearchReq, out *SearchReply) error {
	return h.ProductHandler.SkuSearch(ctx, in, out)
}

func (h *productHandler) SkuList(ctx context.Context, in *SkuListReq, out *SkuListReply) error {
	return h.ProductHandler.SkuList(ctx, in, out)
}

func (h *productHandler) SkuDetail(ctx context.Context, in *common.SkuIDReq, out *SkuReply) error {
	return h.ProductHandler.SkuDetail(ctx, in, out)
}

func (h *productHandler) GetSkuSaleAttrs(ctx context.Context, in *common.SkuIDReq, out *SkuSaleAttrReply) error {
	return h.ProductHandler.GetSkuSaleAttrs(ctx, in, out)
}

func (h *productHandler) GetSkuByID(ctx context.Context, in *common.SkuIDReq, out *SkuInfoInternal) error {
	return h.ProductHandler.GetSkuByID(ctx, in, out)
}

func (h *productHandler) SpuComment(ctx context.Context, in *CommentReq, out *empty.Empty) error {
	return h.ProductHandler.SpuComment(ctx, in, out)
}
