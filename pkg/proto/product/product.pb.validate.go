// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product/product.proto

package product

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SkuListReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuListReqMultiError, or
// nil if none found.
func (m *SkuListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CatId

	// no validation rules for Page

	if len(errors) > 0 {
		return SkuListReqMultiError(errors)
	}

	return nil
}

// SkuListReqMultiError is an error wrapping multiple validation errors
// returned by SkuListReq.ValidateAll() if the designated constraints aren't met.
type SkuListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuListReqMultiError) AllErrors() []error { return m }

// SkuListReqValidationError is the validation error returned by
// SkuListReq.Validate if the designated constraints aren't met.
type SkuListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuListReqValidationError) ErrorName() string { return "SkuListReqValidationError" }

// Error satisfies the builtin error interface
func (e SkuListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuListReqValidationError{}

// Validate checks the field values on SearchReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchReqMultiError, or nil
// if none found.
func (m *SearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for CatId

	// no validation rules for Field

	// no validation rules for Order

	// no validation rules for HasStock

	// no validation rules for PriceS

	// no validation rules for PriceE

	for idx, item := range m.GetAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReqValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReqValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReqValidationError{
					field:  fmt.Sprintf("Attrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	if len(errors) > 0 {
		return SearchReqMultiError(errors)
	}

	return nil
}

// SearchReqMultiError is an error wrapping multiple validation errors returned
// by SearchReq.ValidateAll() if the designated constraints aren't met.
type SearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchReqMultiError) AllErrors() []error { return m }

// SearchReqValidationError is the validation error returned by
// SearchReq.Validate if the designated constraints aren't met.
type SearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReqValidationError) ErrorName() string { return "SearchReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReqValidationError{}

// Validate checks the field values on SearchAttrs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchAttrs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAttrs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchAttrsMultiError, or
// nil if none found.
func (m *SearchAttrs) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAttrs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SearchAttrsMultiError(errors)
	}

	return nil
}

// SearchAttrsMultiError is an error wrapping multiple validation errors
// returned by SearchAttrs.ValidateAll() if the designated constraints aren't met.
type SearchAttrsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAttrsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAttrsMultiError) AllErrors() []error { return m }

// SearchAttrsValidationError is the validation error returned by
// SearchAttrs.Validate if the designated constraints aren't met.
type SearchAttrsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAttrsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAttrsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAttrsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAttrsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAttrsValidationError) ErrorName() string { return "SearchAttrsValidationError" }

// Error satisfies the builtin error interface
func (e SearchAttrsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAttrs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAttrsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAttrsValidationError{}

// Validate checks the field values on CommentReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentReqMultiError, or
// nil if none found.
func (m *CommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetSkuIds()) < 1 {
		err := CommentReqValidationError{
			field:  "SkuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := CommentReqValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStar() <= 0 {
		err := CommentReqValidationError{
			field:  "Star",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 5 || l > 500 {
		err := CommentReqValidationError{
			field:  "Content",
			reason: "value length must be between 5 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Resources

	if len(errors) > 0 {
		return CommentReqMultiError(errors)
	}

	return nil
}

// CommentReqMultiError is an error wrapping multiple validation errors
// returned by CommentReq.ValidateAll() if the designated constraints aren't met.
type CommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentReqMultiError) AllErrors() []error { return m }

// CommentReqValidationError is the validation error returned by
// CommentReq.Validate if the designated constraints aren't met.
type CommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentReqValidationError) ErrorName() string { return "CommentReqValidationError" }

// Error satisfies the builtin error interface
func (e CommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentReqValidationError{}

// Validate checks the field values on CategoryReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryReplyMultiError, or
// nil if none found.
func (m *CategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryReplyMultiError(errors)
	}

	return nil
}

// CategoryReplyMultiError is an error wrapping multiple validation errors
// returned by CategoryReply.ValidateAll() if the designated constraints
// aren't met.
type CategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryReplyMultiError) AllErrors() []error { return m }

// CategoryReplyValidationError is the validation error returned by
// CategoryReply.Validate if the designated constraints aren't met.
type CategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryReplyValidationError) ErrorName() string { return "CategoryReplyValidationError" }

// Error satisfies the builtin error interface
func (e CategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryReplyValidationError{}

// Validate checks the field values on SkuReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuReplyMultiError, or nil
// if none found.
func (m *SkuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SkuReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SkuReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SkuReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SkuReplyMultiError(errors)
	}

	return nil
}

// SkuReplyMultiError is an error wrapping multiple validation errors returned
// by SkuReply.ValidateAll() if the designated constraints aren't met.
type SkuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuReplyMultiError) AllErrors() []error { return m }

// SkuReplyValidationError is the validation error returned by
// SkuReply.Validate if the designated constraints aren't met.
type SkuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuReplyValidationError) ErrorName() string { return "SkuReplyValidationError" }

// Error satisfies the builtin error interface
func (e SkuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuReplyValidationError{}

// Validate checks the field values on SkuListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuListReplyMultiError, or
// nil if none found.
func (m *SkuListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SkuListReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SkuListReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SkuListReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SkuListReplyMultiError(errors)
	}

	return nil
}

// SkuListReplyMultiError is an error wrapping multiple validation errors
// returned by SkuListReply.ValidateAll() if the designated constraints aren't met.
type SkuListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuListReplyMultiError) AllErrors() []error { return m }

// SkuListReplyValidationError is the validation error returned by
// SkuListReply.Validate if the designated constraints aren't met.
type SkuListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuListReplyValidationError) ErrorName() string { return "SkuListReplyValidationError" }

// Error satisfies the builtin error interface
func (e SkuListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuListReplyValidationError{}

// Validate checks the field values on SearchReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchReplyMultiError, or
// nil if none found.
func (m *SearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBrands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("Brands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttrs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Attrs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("Attrs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Cats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Cats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("Cats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchReplyMultiError(errors)
	}

	return nil
}

// SearchReplyMultiError is an error wrapping multiple validation errors
// returned by SearchReply.ValidateAll() if the designated constraints aren't met.
type SearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchReplyMultiError) AllErrors() []error { return m }

// SearchReplyValidationError is the validation error returned by
// SearchReply.Validate if the designated constraints aren't met.
type SearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReplyValidationError) ErrorName() string { return "SearchReplyValidationError" }

// Error satisfies the builtin error interface
func (e SearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReplyValidationError{}

// Validate checks the field values on SkuSaleAttrReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkuSaleAttrReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuSaleAttrReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkuSaleAttrReplyMultiError, or nil if none found.
func (m *SkuSaleAttrReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuSaleAttrReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SkuSaleAttrReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SkuSaleAttrReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SkuSaleAttrReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SkuSaleAttrReplyMultiError(errors)
	}

	return nil
}

// SkuSaleAttrReplyMultiError is an error wrapping multiple validation errors
// returned by SkuSaleAttrReply.ValidateAll() if the designated constraints
// aren't met.
type SkuSaleAttrReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuSaleAttrReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuSaleAttrReplyMultiError) AllErrors() []error { return m }

// SkuSaleAttrReplyValidationError is the validation error returned by
// SkuSaleAttrReply.Validate if the designated constraints aren't met.
type SkuSaleAttrReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuSaleAttrReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuSaleAttrReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuSaleAttrReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuSaleAttrReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuSaleAttrReplyValidationError) ErrorName() string { return "SkuSaleAttrReplyValidationError" }

// Error satisfies the builtin error interface
func (e SkuSaleAttrReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuSaleAttrReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuSaleAttrReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuSaleAttrReplyValidationError{}

// Validate checks the field values on SkuInfoInternal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkuInfoInternal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuInfoInternal with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkuInfoInternalMultiError, or nil if none found.
func (m *SkuInfoInternal) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuInfoInternal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSku()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SkuInfoInternalValidationError{
					field:  "Sku",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SkuInfoInternalValidationError{
					field:  "Sku",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSku()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SkuInfoInternalValidationError{
				field:  "Sku",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SkuInfoInternalMultiError(errors)
	}

	return nil
}

// SkuInfoInternalMultiError is an error wrapping multiple validation errors
// returned by SkuInfoInternal.ValidateAll() if the designated constraints
// aren't met.
type SkuInfoInternalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuInfoInternalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuInfoInternalMultiError) AllErrors() []error { return m }

// SkuInfoInternalValidationError is the validation error returned by
// SkuInfoInternal.Validate if the designated constraints aren't met.
type SkuInfoInternalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuInfoInternalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuInfoInternalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuInfoInternalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuInfoInternalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuInfoInternalValidationError) ErrorName() string { return "SkuInfoInternalValidationError" }

// Error satisfies the builtin error interface
func (e SkuInfoInternalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuInfoInternal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuInfoInternalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuInfoInternalValidationError{}
