// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: market/market.proto

package market

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CatIDReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CatIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CatIDReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CatIDReqMultiError, or nil
// if none found.
func (m *CatIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CatIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CatIDReqMultiError(errors)
	}

	return nil
}

// CatIDReqMultiError is an error wrapping multiple validation errors returned
// by CatIDReq.ValidateAll() if the designated constraints aren't met.
type CatIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CatIDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CatIDReqMultiError) AllErrors() []error { return m }

// CatIDReqValidationError is the validation error returned by
// CatIDReq.Validate if the designated constraints aren't met.
type CatIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatIDReqValidationError) ErrorName() string { return "CatIDReqValidationError" }

// Error satisfies the builtin error interface
func (e CatIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatIDReqValidationError{}

// Validate checks the field values on CouponIDReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponIDReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponIDReqMultiError, or
// nil if none found.
func (m *CouponIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CouponIDReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CouponIDReqMultiError(errors)
	}

	return nil
}

// CouponIDReqMultiError is an error wrapping multiple validation errors
// returned by CouponIDReq.ValidateAll() if the designated constraints aren't met.
type CouponIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponIDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponIDReqMultiError) AllErrors() []error { return m }

// CouponIDReqValidationError is the validation error returned by
// CouponIDReq.Validate if the designated constraints aren't met.
type CouponIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponIDReqValidationError) ErrorName() string { return "CouponIDReqValidationError" }

// Error satisfies the builtin error interface
func (e CouponIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponIDReqValidationError{}

// Validate checks the field values on CouponUsedReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponUsedReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUsedReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponUsedReqMultiError, or
// nil if none found.
func (m *CouponUsedReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUsedReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CouponId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return CouponUsedReqMultiError(errors)
	}

	return nil
}

// CouponUsedReqMultiError is an error wrapping multiple validation errors
// returned by CouponUsedReq.ValidateAll() if the designated constraints
// aren't met.
type CouponUsedReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUsedReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUsedReqMultiError) AllErrors() []error { return m }

// CouponUsedReqValidationError is the validation error returned by
// CouponUsedReq.Validate if the designated constraints aren't met.
type CouponUsedReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUsedReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUsedReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUsedReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUsedReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUsedReqValidationError) ErrorName() string { return "CouponUsedReqValidationError" }

// Error satisfies the builtin error interface
func (e CouponUsedReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUsedReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUsedReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUsedReqValidationError{}

// Validate checks the field values on HomeCatDataReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HomeCatDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeCatDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HomeCatDataReplyMultiError, or nil if none found.
func (m *HomeCatDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeCatDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HomeCatDataReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HomeCatDataReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HomeCatDataReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HomeCatDataReplyMultiError(errors)
	}

	return nil
}

// HomeCatDataReplyMultiError is an error wrapping multiple validation errors
// returned by HomeCatDataReply.ValidateAll() if the designated constraints
// aren't met.
type HomeCatDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeCatDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeCatDataReplyMultiError) AllErrors() []error { return m }

// HomeCatDataReplyValidationError is the validation error returned by
// HomeCatDataReply.Validate if the designated constraints aren't met.
type HomeCatDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeCatDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeCatDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeCatDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeCatDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeCatDataReplyValidationError) ErrorName() string { return "HomeCatDataReplyValidationError" }

// Error satisfies the builtin error interface
func (e HomeCatDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeCatDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeCatDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeCatDataReplyValidationError{}

// Validate checks the field values on HomeDataReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HomeDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeDataReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HomeDataReplyMultiError, or
// nil if none found.
func (m *HomeDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HomeDataReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HomeDataReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HomeDataReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HomeDataReplyMultiError(errors)
	}

	return nil
}

// HomeDataReplyMultiError is an error wrapping multiple validation errors
// returned by HomeDataReply.ValidateAll() if the designated constraints
// aren't met.
type HomeDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeDataReplyMultiError) AllErrors() []error { return m }

// HomeDataReplyValidationError is the validation error returned by
// HomeDataReply.Validate if the designated constraints aren't met.
type HomeDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeDataReplyValidationError) ErrorName() string { return "HomeDataReplyValidationError" }

// Error satisfies the builtin error interface
func (e HomeDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeDataReplyValidationError{}

// Validate checks the field values on AppSettingReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppSettingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppSettingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppSettingReplyMultiError, or nil if none found.
func (m *AppSettingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AppSettingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppSettingReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppSettingReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppSettingReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AppSettingReplyMultiError(errors)
	}

	return nil
}

// AppSettingReplyMultiError is an error wrapping multiple validation errors
// returned by AppSettingReply.ValidateAll() if the designated constraints
// aren't met.
type AppSettingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppSettingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppSettingReplyMultiError) AllErrors() []error { return m }

// AppSettingReplyValidationError is the validation error returned by
// AppSettingReply.Validate if the designated constraints aren't met.
type AppSettingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppSettingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppSettingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppSettingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppSettingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppSettingReplyValidationError) ErrorName() string { return "AppSettingReplyValidationError" }

// Error satisfies the builtin error interface
func (e AppSettingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppSettingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppSettingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppSettingReplyValidationError{}

// Validate checks the field values on NoticeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoticeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NoticeReplyMultiError, or
// nil if none found.
func (m *NoticeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NoticeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NoticeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NoticeReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NoticeReplyMultiError(errors)
	}

	return nil
}

// NoticeReplyMultiError is an error wrapping multiple validation errors
// returned by NoticeReply.ValidateAll() if the designated constraints aren't met.
type NoticeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeReplyMultiError) AllErrors() []error { return m }

// NoticeReplyValidationError is the validation error returned by
// NoticeReply.Validate if the designated constraints aren't met.
type NoticeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeReplyValidationError) ErrorName() string { return "NoticeReplyValidationError" }

// Error satisfies the builtin error interface
func (e NoticeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeReplyValidationError{}

// Validate checks the field values on SearchReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchReplyMultiError, or
// nil if none found.
func (m *SearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchReplyMultiError(errors)
	}

	return nil
}

// SearchReplyMultiError is an error wrapping multiple validation errors
// returned by SearchReply.ValidateAll() if the designated constraints aren't met.
type SearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchReplyMultiError) AllErrors() []error { return m }

// SearchReplyValidationError is the validation error returned by
// SearchReply.Validate if the designated constraints aren't met.
type SearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReplyValidationError) ErrorName() string { return "SearchReplyValidationError" }

// Error satisfies the builtin error interface
func (e SearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReplyValidationError{}

// Validate checks the field values on PayReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayReplyMultiError, or nil
// if none found.
func (m *PayReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PayReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PayReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PayReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PayReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PayReplyMultiError(errors)
	}

	return nil
}

// PayReplyMultiError is an error wrapping multiple validation errors returned
// by PayReply.ValidateAll() if the designated constraints aren't met.
type PayReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayReplyMultiError) AllErrors() []error { return m }

// PayReplyValidationError is the validation error returned by
// PayReply.Validate if the designated constraints aren't met.
type PayReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayReplyValidationError) ErrorName() string { return "PayReplyValidationError" }

// Error satisfies the builtin error interface
func (e PayReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayReplyValidationError{}

// Validate checks the field values on CouponListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CouponListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponListReplyMultiError, or nil if none found.
func (m *CouponListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponListReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponListReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponListReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CouponListReplyMultiError(errors)
	}

	return nil
}

// CouponListReplyMultiError is an error wrapping multiple validation errors
// returned by CouponListReply.ValidateAll() if the designated constraints
// aren't met.
type CouponListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponListReplyMultiError) AllErrors() []error { return m }

// CouponListReplyValidationError is the validation error returned by
// CouponListReply.Validate if the designated constraints aren't met.
type CouponListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponListReplyValidationError) ErrorName() string { return "CouponListReplyValidationError" }

// Error satisfies the builtin error interface
func (e CouponListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponListReplyValidationError{}

// Validate checks the field values on CouponInternal with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponInternal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponInternal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponInternalMultiError,
// or nil if none found.
func (m *CouponInternal) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponInternal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCoupon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponInternalValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponInternalValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoupon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponInternalValidationError{
				field:  "Coupon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CouponInternalMultiError(errors)
	}

	return nil
}

// CouponInternalMultiError is an error wrapping multiple validation errors
// returned by CouponInternal.ValidateAll() if the designated constraints
// aren't met.
type CouponInternalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponInternalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponInternalMultiError) AllErrors() []error { return m }

// CouponInternalValidationError is the validation error returned by
// CouponInternal.Validate if the designated constraints aren't met.
type CouponInternalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponInternalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponInternalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponInternalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponInternalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponInternalValidationError) ErrorName() string { return "CouponInternalValidationError" }

// Error satisfies the builtin error interface
func (e CouponInternalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponInternal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponInternalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponInternalValidationError{}
